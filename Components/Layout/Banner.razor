@using MyBarMenu.Client.Services.Interfaces
@using Blazored.LocalStorage
@inject IAccountService _accountService
@inject ILocalStorageService _localStorageService
@rendermode InteractiveServer

<h2>@Title</h2>
<button>Create</button>
<ul>
    @foreach (var username in UserNames)
    {
        <li>@username</li>
    }
</ul>

@code {
    [Parameter]
    public required string Title { get; set; }

    [Parameter]
    public required List<string> UserNames { get; set; } = new List<string>();

    private bool _initialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_initialized && firstRender)
        {
            _initialized = true;

            var token = await _localStorageService.GetItemAsync<string>("authToken");

            if (!string.IsNullOrEmpty(token))
            {
                var users = await _accountService.GetUsers(token);
                UserNames = users.Select(u => u.UserName).ToList();

                StateHasChanged(); // Needed because we updated data after initial render
            }

            //Test with nasty token
            var nastyUsers = await _accountService.GetUsers("nastytoken");
        }
    }
}


@* @using MyBarMenu.Client.Services.Interfaces;
@using Blazored.LocalStorage;
@inject IAccountService _accountService
@inject ILocalStorageService _localStorageService
@rendermode InteractiveServer

<h2>@Title</h2>
<button>Create</button>
<ul>
    @foreach(var username in UserNames)
    {
        <li>@username</li>
    }
</ul>

@code 
{
    [Parameter]
    public required string Title { get; set; }

    [Parameter]
    public required List<string> UserNames { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var token = await _localStorageService.GetItemAsync<string>("authToken");

        if (token == null)
        {
            UserNames = new List<string>();
        }

        var users = await _accountService.GetUsers(token);

        foreach(var user in users)
        {
            UserNames.Add(user.UserName);
        }
    }
}
 *@